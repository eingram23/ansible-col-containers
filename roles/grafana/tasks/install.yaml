---
- name: Run root tasks
  become: true
  become_method: sudo
  become_user: root
  block:
    - name: Enable linger for user - {{ user_account }}
      ansible.builtin.command: loginctl enable-linger {{ user_account }}

    - name: Open firewall port
      ansible.builtin.include_role:
        name: eingram23.linux.firewall

    - name: Create folder structure for {{ app_name }}
      ansible.builtin.file:
        path: /opt/{{ app_name }}/{{ folder_item }}
        state: directory
        mode: '0755'
        recurse: true
        owner: poduser
        group: poduser
      loop:
        - dashboards
        - datasources
      loop_control:
        loop_var: folder_item

- name: Pull Grafana dashboard json from Google Storage bucket
  delegate_to: localhost
  become: true
  become_method: sudo
  become_user: root
  block:
    - name: Create gcp-creds.json
      ansible.builtin.template:
        src: gcp-creds.json.j2
        dest: "/var/tmp/gcp-creds.json"
        mode: '0400'

    - name: Download grafana dashboard json files from Google Storage bucket
      google.cloud.gcp_storage_object:
        bucket: ycdisp-configs
        dest: /var/tmp/test.json
        src: grafana/dashboards/alertmanager.json
        action: download
        auth_kind: serviceaccount
        project: proj-yc-srv1
        service_account_file: "/var/tmp/gcp-creds.json"

- meta: end_play

- name: Copy grafana dashboard json files to remote server
  ansible.builtin.copy:
    src: "/var/tmp/{{ item }}"
    dest: /opt/{{ app_name }}/dashboards/
    mode: '0644'
    owner: poduser
    group: poduser
  with_fileglob: "*.json"

- name: Copy grafana config to remote server
  ansible.builtin.copy:
    src: dashboards.yaml
    dest: /opt/{{ app_name }}/dashboards/
    mode: '0644'
    owner: poduser
    group: poduser

- name: Create grafana datasource config on remote server
  ansible.builtin.template:
    src: datasources.yaml.j2
    dest: /opt/{{ app_name }}/datasources/datasources.yaml
    owner: poduser
    group: poduser

- name: Prep for upgrade
  when: upgrade == "yes"
  block:
    - name: Stop systemd service for container {{ app_name }}
      ansible.builtin.systemd:
        name: container-{{ app_name }}
        state: stopped
        scope: user

    - name: Remove container {{ app_name }}
      containers.podman.podman_container:
        name: "{{ app_name }}"
        state: absent

    - name: Remove volumes for {{ app_name }}
      containers.podman.podman_volume:
        name: "{{ app_name }}_data"
        state: absent

    - name: Cleanup old image
      containers.podman.podman_image:
        name: "{{ image }}:{{ old_ver }}"
        state: absent

- name: Create and run container {{ app_name }}
  containers.podman.podman_container:
    name: "{{ app_name }}"
    image: "{{ image }}:{{ ver }}"
    state: stopped
    restart_policy: always
    user: 472
    pod: "{{ pod_name }}"
    publish:
      - "3000:3000"
    env:
      GF_INSTALL_PLUGINS: "grafana-clock-panel, flant-statusmap-panel, marcusolsson-treemap-panel"
    volume:
      - /opt/{{ app_name }}/dashboards:/etc/grafana/provisioning/dashboards
      - /opt/{{ app_name }}/datasources:/etc/grafana/provisioning/datasources
      - "{{ app name }}_data:/var/lib/grafana"
    generate_systemd:
      path: /home/{{ user_account }}/.config/systemd/user
      restart_policy: always

- name: Set XDG_RUNTIME_DIR env variable
  ansible.builtin.lineinfile:
    path: /home/{{ user_account }}/.bash_profile
    search_string: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'
    insertafter: '# User specific environment and startup programs'
    line: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'

- name: Get info for {{ user_account }}
  ansible.builtin.user:
    name: "{{ user_account }}"
  register: user_info

- name: Enable service - container-{{ app_name }}
  ansible.builtin.systemd:
    name: container-{{ app_name }}
    state: started
    enabled: true
    daemon_reload: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: /run/user/{{ user_info.uid }}
