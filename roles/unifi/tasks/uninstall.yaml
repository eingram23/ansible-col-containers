- name: Run root tasks
  become: true
  become_method: ansible.builtin.sudo
  become_user: root
  block:
    - name: Close firewall ports
      when: fw_port is defined
      ansible.builtin.include_role:
        name: eingram23.linux.firewall
        tasks_from: delete

    - name: Remove folder for {{ app_name }}
      ansible.builtin.file:
        path: /opt/{{ app_name }}
        state: absent

- name: Run tasks as {{ user_account }}
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ user_account }}"
  block:
    - name: Get pod info for {{ app_name }}
      containers.podman.podman_pod_info:
        name: "{{ app_name }}"
      register: app_info
      ignore_errors: true

    - name: Remove pod if found - {{ app_name }}
      when: app_info.pods | length > 0
      block:
        - name: Stop systemd service for pod - {{ app_name }}
          ansible.builtin.systemd:
            name: pod-{{ app_name }}
            state: stopped
            scope: "{{ 'user' if user_account != 'root' else 'system' }}"

        - name: Remove pod - {{ app_name }}
          containers.podman.podman_pod:
            name: "{{ app_name }}"
            state: absent

        - name: Find all containers in the unifi pod
          containers.podman.podman_container_info:
            pod: "{{ app_name }}"
          register: container_info

        - name: Delete all volumes for {{ app_name }}
          when: container_info.containers | length > 0
          containers.podman.podman_volume:
            name: "{{ vol_item.Name }}"
            state: absent
          loop: "{{ container_info.containers | map(attribute='Mounts') | flatten | selectattr('Name', 'defined') | list }}"
          loop_control:
            loop_var: vol_item

        # - name: Remove images for {{ app_name }}
        #   when: image_item.Containers == 0
        #   containers.podman.podman_image:
        #     name: "{{ image_item.Image }}"
        #     state: absent
        #   loop: "{{ app_info.containers }}"
        #   loop_control:
        #     loop_var: image_item

        # - name: Delete all volumes for {{ app_name }}
        #   when: app_info.containers[0].Mounts | length > 0
        #   containers.podman.podman_volume:
        #     name: "{{ vol_item.Name }}"
        #     state: absent
        #   loop: "{{ app_info.containers[0].Mounts | selectattr('Name', 'defined') | list }}"
        #   loop_control:
        #     loop_var: vol_item

        - name: Disable service - pod-{{ app_name }}
          ansible.builtin.systemd:
            name: pod-{{ app_name }}
            state: stopped
            scope: "{{ 'user' if user_account != 'root' else 'system' }}"
            enabled: false
            daemon_reload: true
