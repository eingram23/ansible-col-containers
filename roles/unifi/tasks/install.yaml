---
- name: Install env for {{ app_name }}
  ansible.builtin.include_role:
    name: eingram23.containers.common
    tasks_from: create_env

- name: Run tasks as {{ user_account }}
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ user_account }}"
  block:
    - name: Create unifi config folder
      become: true
      become_method: ansible.builtin.sudo
      become_user: root
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ user_account }}"
        group: "{{ user_account }}"
      loop:
        - /opt/{{ app_name }}/config

    - name: Create mongodb init on host
      ansible.builtin.template:
        src: init-mongo.js.j2
        dest: "/opt/{{ app_name }}/init-mongo.js"
        mode: '0755'
        owner: "{{ user_account }}"
        group: "{{ user_account }}"

    - name: Prep for upgrade
      when: upgrade is defined and upgrade == "yes"
      block:
        - name: Stop systemd service for pod-{{ app_name }}
          ansible.builtin.systemd:
            name: pod-{{ app_name }}
            state: stopped
            enabled: false
            scope: user

        - name: Remove pod - {{ app_name }}
          containers.podman.podman_pod:
            name: "{{ app_name }}"
            state: absent

        - name: Remove mongodb volume
          when: upgrade_mongodb is defined and upgrade_mongodb
          containers.podman.podman_volume:
            state: absent
            name: unifi-db-data

    - name: Create pod
      containers.podman.podman_pod:
        name: "{{ app_name }}"
        state: created
        publish:
          - 8443:8443
          - 3478:3478/udp
          - 10001:10001/udp
          - 8080:8080
          - 1900:1900/udp
          - 8843:8843
          - 8880:8880
          - 6789:6789
          - 5514:5514/udp

    - name: Create {{ app_name }}-network-application container
      containers.podman.podman_container:
        name: "{{ app_name }}-network-application"
        image: lscr.io/linuxserver/{{ app_name }}-network-application:{{ unifi_ver }}
        state: stopped
        pod: "{{ app_name }}"
        restart_policy: unless-stopped
        env:
          PUID=1000
          PGID=1000
          MONGO_USER=unifi
          MONGO_PASS={{ lookup('hashi_vault', 'secret=secret/ssh/eingram:ssh_password') }}
          MONGO_HOST=unifi-db
          MONGO_PORT=27017
          MONGO_DBNAME=unifi
          MEM_LIMIT=1024
          MEM_STARTUP=1024
        volume:
          - "/opt/{{ app_name }}/config:/config"

    - name: Create {{ app_name }}-db container
      containers.podman.podman_container:
        name: "{{ app_name }}-db"
        image: docker.io/mongo:{{ mongo_ver }}
        state: stopped
        pod: "{{ app_name }}"
        restart_policy: unless-stopped
        # env:
        #   MONGO_INITDB_ROOT_USERNAME=unifi
        #   MONGO_INITDB_ROOT_PASSWORD={{ lookup('hashi_vault', 'secret=secret/ssh/eingram:ssh_password') }}
        volumes:
          - "{{ app_name }}-db-data:/data/db"
          - "/opt/{{ app_name }}/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro"

    - name: Set XDG_RUNTIME_DIR env variable
      ansible.builtin.lineinfile:
        path: /home/{{ user_account }}/.bash_profile
        search_string: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'
        insertafter: '# User specific environment and startup programs'
        line: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'

    - name: Get {{ user_account }} info
      ansible.builtin.user:
        name: "{{ user_account }}"
      register: user_info

    - name: Generate systemd units for {{ app_name }} pod and containers
      containers.podman.podman_generate_systemd:
        name: "{{ app_name }}"
        no_header: true
        restart_policy: always
        dest: ~/.config/systemd/user/

    - name: Enable and start pod-{{ app_name }} service
      ansible.builtin.systemd:
        name: pod-{{ app_name }}
        state: started
        enabled: true
        daemon_reload: true
        scope: user
      environment:
        XDG_RUNTIME_DIR: /run/user/{{ user_info.uid }}

    - name: Hide mongo pw in init script
      ansible.builtin.lineinfile:
        path: "/opt/{{ app_name }}/init-mongo.js"
        search_string: "{{ lookup('hashi_vault', 'secret=secret/ssh/eingram:ssh_password') }}"
        line: var pwd = ""
        owner: "{{ user_account }}"
        group: "{{ user_account }}"
        mode: '0644'
