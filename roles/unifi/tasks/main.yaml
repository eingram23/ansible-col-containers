---
- name: Open firewall ports
  ansible.builtin.include_role:
    name: eingram23.homelab.firewall
    apply:
      become: true
      become_method: sudo
      become_user: root

- name: Create unifi folder
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: poduser
    group: poduser
    recurse: true
  loop:
    - /opt/unifi
  become: true
  become_method: sudo
  become_user: root

- name: Create mongodb init on host
  ansible.builtin.template:
    src: init-mongo.js.j2
    dest: /opt/unifi/init-mongo.js
    mode: '0755'
    owner: poduser
    group: poduser

- name: Prep for upgrade
  when: upgrade == "yes"
  block:
    - name: Stop systemd service for unifi pod
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        scope: user
      loop:
        - pod-unifi

    - name: Remove unifi pod
      containers.podman.podman_pod:
        name: "{{ item }}"
        state: absent
      loop:
        - unifi

- name: Create pod
  containers.podman.podman_pod:
    name: unifi
    state: created
    publish:
      - 8443:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 1900:1900/udp
      - 8843:8843
      - 8880:8880
      - 6789:6789
      - 5514:5514/udp
    # generate_systemd:
    #   path: /home/poduser/.config/systemd/user
    #   restart_policy: always

- name: Create unifi-network-application container
  containers.podman.podman_container:
    name: unifi-network-application
    image: lscr.io/linuxserver/unifi-network-application:{{ unifi_ver }}
    state: stopped
    pod: unifi
    restart_policy: unless-stopped
    # publish:
    #   - 8443:8443
    #   - 3478:3478/udp
    #   - 10001:10001/udp
    #   - 8080:8080
    #   - 1900:1900/udp
    #   - 8843:8843
    #   - 8880:8880
    #   - 6789:6789
    #   - 5514:5514/udp
    env:
      PUID=1000
      PGID=1000
      MONGO_USER=unifi
      MONGO_PASS={{ lookup('hashi_vault', 'secret=secret/ssh/eingram:ssh_password') }}
      MONGO_HOST=unifi-db
      MONGO_PORT=27017
      MONGO_DBNAME=unifi
      MEM_LIMIT=1024
      MEM_STARTUP=1024
    volume:
      - unifi-data:/config
    # generate_systemd:
    #   path: /home/poduser/.config/systemd/user
    #   restart_policy: always

- name: Create unifi-db container
  containers.podman.podman_container:
    name: unifi-db
    image: docker.io/mongo:{{ mongo_ver }}
    state: stopped
    pod: unifi
    restart_policy: unless-stopped
    # env:
      # MONGO_INITDB_ROOT_USERNAME=unifi
      # MONGO_INITDB_ROOT_PASSWORD={{ lookup('hashi_vault', 'secret=secret/ssh/eingram:ssh_password') }}
    volumes:
      - unifi-db-data:/data/db
      - /opt/unifi/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    # generate_systemd:
    #   path: /home/poduser/.config/systemd/user
    #   restart_policy: always

- name: Set XDG_RUNTIME_DIR env variable
  ansible.builtin.lineinfile:
    path: /home/poduser/.bash_profile
    search_string: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'
    insertafter: '# User specific environment and startup programs'
    line: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'

- name: Get poduser info
  ansible.builtin.user:
    name: poduser
  register: poduser_info

- name: Generate systemd units for unifi pod and containers
  containers.podman.podman_generate_systemd:
    name: unifi
    no_header: true
    restart_policy: always
    dest: ~/.config/systemd/user/

- name: Enable and start pod-unifi service
  ansible.builtin.systemd:
    name: pod-unifi
    state: started
    enabled: true
    daemon_reload: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: /run/user/{{ poduser_info.uid }}

- name: Hide mongo pw in init script
  ansible.builtin.lineinfile:
    path: /opt/unifi/init-mongo.js
    search_string: "{{ lookup('hashi_vault', 'secret=secret/ssh/eingram:ssh_password') }}"
    line: var pwd = ""
    owner: podman
    group: podman
    mode: '0644'
