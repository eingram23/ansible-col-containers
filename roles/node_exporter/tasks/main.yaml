---
- name: Create supporting folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    recurse: true
    owner: poduser
    group: poduser
  loop:
    - /opt/node-exporter
  become: true
  become_method: sudo
  become_user: root

- name: Open firewall ports
  ansible.builtin.include_role:
    name: eingram23.homelab.firewall
    apply:
      become: true
      become_method: sudo
      become_user: root

- name: Run podman unshare
  ansible.builtin.shell:
    podman unshare chown -R 0:0 /opt/node-exporter

- name: Copy files to host
  ansible.builtin.copy:
    src: web-config.yml
    dest: /opt/node-exporter
    mode: '0644'
    owner: poduser
    group: poduser

- name: Check for node-exporter tls.crt
  ansible.builtin.stat:
    path: /opt/node-exporter/tls.crt
  register: crt_file

- name: Run cert tasks
  when: tls == "yes" and ( not crt_file.stat.exists or renew_cert == "yes" )
  block:
    - name: Generate a certificate with an existing token
      community.hashi_vault.vault_pki_generate_certificate:
        role_name: "{{ vault_role }}"
        common_name: "{{ inventory_hostname }}"
        alt_names:
          - "{{ inventory_hostname }}"
        ip_sans:
          - "{{ ansible_default_ipv4.address }}"
        ttl: "{{ ttl }}"
        url: https://vault-k3s.local.lan/
        engine_mount_point: pki_int
        auth_method: userpass
        username: "eingram"
        password: "{{ lookup('hashi_vault', 'secret=secret/ssh/eingram:ssh_password') }}"
        validate_certs: false
      register: cert_data
      delegate_to: localhost
      become: false

    - name: Create cert on host
      ansible.builtin.template:
        src: tls.crt.j2
        dest: /opt/node-exporter/tls.crt
        mode: '0440'
        owner: poduser
        group: poduser

    - name: Create key on host
      ansible.builtin.copy:
        dest: /opt/node-exporter/tls.key
        content: "{{ cert_data.data.data.private_key }}"
        mode: '0400'
        owner: poduser
        group: poduser

    - name: Create rootca on host
      ansible.builtin.copy:
        dest: /opt/node-exporter/ca.crt
        content: "{{ cert_data.data.data.ca_chain[1] }}"
        mode: '0440'
        owner: poduser
        group: poduser

- name: Run podman unshare
  ansible.builtin.shell:
    podman unshare chown -R 65534:65534 /opt/node-exporter

- name: Enable processes collector
  ansible.builtin.set_fact:
    collect_processes: --collector.processes
  when: processes == "yes"

- name: Enable systemd collector
  ansible.builtin.set_fact:
    collect_systemd: --collector.systemd
  when: systemd == "yes"

- name: Run node-exporter container (tls)
  when: tls == "yes"
  containers.podman.podman_container:
    name: node-exporter
    image: docker.io/prom/node-exporter:{{ ver }}
    state: stopped
    restart_policy: always
    privileged: true
    network: host
    pid: host
    command: >
      --path.rootfs=/host
      --web.config.file=/etc/node-exporter/web-config.yml
      {{ collect_processes }}
      {{ collect_systemd }}
    volume:
      - /:/host:ro,rslave
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:rw
      - /opt/node-exporter:/etc/node-exporter
    generate_systemd:
      path: /home/poduser/.config/systemd/user
      restart_policy: always

- name: Run node-exporter container
  when: not tls == "yes"
  containers.podman.podman_container:
    name: node-exporter
    image: docker.io/prom/node-exporter:{{ ver }}
    state: stopped
    restart_policy: always
    privileged: true
    network: host
    pid: host
    command: >
      --path.rootfs=/host
      {{ collect_processes }}
      {{ collect_systemd }}
    volume:
      - /:/host:ro,rslave
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:rw
    generate_systemd:
      path: /home/poduser/.config/systemd/user
      restart_policy: always

- name: Check if poduser is lingering
  ansible.builtin.stat:
    path: /var/lib/systemd/linger/poduser
  register: poduser_lingering

- name: Enable lingering if needed
  ansible.builtin.command: "loginctl enable-linger podman"
  when: not poduser_lingering.stat.exists
  become: true
  become_method: sudo
  become_user: root

- name: Set XDG_RUNTIME_DIR env variable
  ansible.builtin.lineinfile:
    path: /home/poduser/.bash_profile
    search_string: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'
    insertafter: '# User specific environment and startup programs'
    line: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'

- name: Get poduser info
  ansible.builtin.user:
    name: poduser
  register: poduser_info

- name: Enable container-node-exporter service
  ansible.builtin.systemd:
    name: container-node-exporter
    state: started
    enabled: true
    daemon_reload: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: /run/user/{{ poduser_info.uid }}

- name: Restart container-node-exporter service
  ansible.builtin.systemd:
    name: container-node-exporter
    state: restarted
    daemon_reload: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: /run/user/{{ poduser_info.uid }}
