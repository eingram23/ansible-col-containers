---
- name: Assert that needed vars are set
  assert:
    that:
      - app_name is defined
      - pg_port is defined
      - user_account is defined

- name: Set fw_port
  set_fact:
    fw_port: 
      - "{{ pg_port }}/tcp"

- name: Set publish_port
  set_fact:
    publish_port: "{{ pg_port }}:5432"

- name: Run root tasks
  become: true
  become_method: sudo
  become_user: root
  block:
    - name: Check if user account exists
      ansible.builtin.getent:
        database: passwd
        key: "{{ user_account }}"
      register: user_account_exists

    - name: Fail if user account does not exist
      ansible.builtin.fail:
        msg: "User account {{ user_account }} does not exist."
      when: user_account_exists is not defined

    - name: Make sure podman is installed
      ansible.builtin.package:
        name: podman
        state: present

    - name: Install podman-plugins
      ansible.builtin.package:
        name: podman-plugins
        state: present

    - name: Enable linger for {{ user_account }}
      ansible.builtin.command: loginctl enable-linger {{ user_account }}

    - name: Open firewall port
      ansible.builtin.include_role:
        name: eingram23.linux.firewall

    - name: Create folder for {{ app_name }}
      ansible.builtin.file:
        path: /opt/{{ app_name }}
        state: directory
        mode: '0755'
        owner: "{{ user_account }}"
        group: "{{ user_account }}"

- name: Prep for upgrade
  when: upgrade == "yes"
  block:
    - name: Stop systemd service for container - {{ app_name }}
      ansible.builtin.systemd:
        name: container-{{ app_name }}
        state: stopped
        scope: user

    - name: Remove container - {{ app_name }}
      containers.podman.podman_container:
        name: "{{ app_name }}"
        state: absent

    - name: Cleanup old image
      containers.podman.podman_image:
        name: "{{ image }}:{{ old_ver }}"
        state: absent

- name: Run container - {{ app_name }}
  containers.podman.podman_container:
    name: "{{ app_name }}"
    image: docker.io/postgres:{{ ver }}
    env:
      POSTGRES_PASSWORD: "{{ lookup('hashi_vault', 'secret=secret/ssh/eingram:ssh_password') }}"
    volume:
      - "{{ app_name }}-data:/var/lib/postgresql/data"
    state: stopped
    restart_policy: always
    publish:
      - "{{ publish_port }}"
    generate_systemd:
      path: /home/{{ user_account }}/.config/systemd/user
      restart_policy: always

- name: Set XDG_RUNTIME_DIR env variable
  ansible.builtin.lineinfile:
    path: /home/{{ user_account }}/.bash_profile
    search_string: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'
    insertafter: '# User specific environment and startup programs'
    line: 'export XDG_RUNTIME_DIR=/run/user/$(id -u)'

- name: Get info - {{ user_account }}
  ansible.builtin.user:
    name: "{{ user_account }}"
  register: user_info

- name: Enable service - container-{{ app_name }}
  ansible.builtin.systemd:
    name: container-{{ app_name }}
    state: started
    enabled: true
    daemon_reload: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: /run/user/{{ user_info.uid }}
