---
- name: Check if dfsitebackup.tar.gz exists
  ansible.builtin.stat:
    path: /root/dfsitebackup.tar.gz
  register: dfsitebackup

- name: Stop playbook if dfsitebackup.tar.gz doesn't exist
  ansible.builtin.fail:
    msg: "dfsitebackup.tar.gz not found"
  when: not dfsitebackup.stat.exists

- name: Check if dfsqlbackup.bak.gz exists
  ansible.builtin.stat:
    path: /root/dfsqlbackup.bak.gz
  register: dfsqlbackup

- name: Stop playbook if dfsqlbackup.bak.gz doesn't exist
  ansible.builtin.fail:
    msg: "dfsqlbackup.bak.gz not found"
  when: not dfsqlbackup.stat.exists

- name: Create github key
  ansible.builtin.template:
    src: ssh-key-git.key.j2
    dest: /root/ssh-key-git.key
    mode: '0400'

- name: Create site supporting folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: true
    mode: '0755'
  loop:
    - "{{ approot }}"
    - "{{ builddir }}"

- name: Check if Settings.php already exists
  ansible.builtin.stat:
    path: "{{ approot }}/public_html/Settings.php"
  register: settingsphp

- block:
    - name: Extract web files to html root
      ansible.builtin.unarchive:
        src: /root/dfsitebackup.tar.gz
        dest: "{{ approot }}/"
        remote_src: true
        extra_opts: [--strip-components=4]

    - name: Add db password to Settings.php
      ansible.builtin.lineinfile:
        path: "{{ approot }}/public_html/Settings.php"
        search_string: '$db_passwd = '
        line: $db_passwd = '{{ mysql_smfprod }}';

    - name: Change site URL to test.diversionforum.net (if env = test)
      ansible.builtin.lineinfile:
        path: "{{ approot }}/public_html/Settings.php"
        search_string: '$boardurl = '
        line: $boardurl = 'http://test.diversionforum.net';
      when: env == "test"

    - name: Copy repair_settings.php
      ansible.builtin.copy:
        src: repair_settings.php
        dest: "{{ approot }}/public_html/repair_settings.php"
        mode: '0644'
  when: not settingsphp.stat.exists

- name: Clone containers repo from github
  ansible.builtin.git:
    repo: "{{ repo }}containers.git"
    dest: "{{ builddir }}"
    key_file: /root/ssh-key-git.key
    accept_hostkey: true
    clone: true
    update: true
    force: true

- name: Remove github key
  ansible.builtin.file:
    path: /root/ssh-key-git.key
    state: absent

- name: Build diversionforum.net-web image
  containers.podman.podman_image:
    name: "{{ app }}-web"
    path: "{{ builddir }}diversionforum.net/nginx"
    force: true

- name: Build diversionforum.net-php image
  containers.podman.podman_image:
    name: "{{ app }}-php"
    path: "{{ builddir }}diversionforum.net/php"
    force: true

- name: Extract df sql backup
  ansible.builtin.shell: gunzip -c /root/dfsqlbackup.bak.gz > {{ builddir }}diversionforum.net/mariadb/smfprod.sql

- name: Build diversionforum.net-mariadb image
  containers.podman.podman_image:
    name: "{{ app }}-db"
    path: "{{ builddir }}diversionforum.net/mariadb"
    force: true
  notify: Init mariadb

- name: Create app pod
  containers.podman.podman_pod:
    name: "{{ app }}"
    state: started

- name: Run diversionforum.net-web container
  containers.podman.podman_container:
    name: "{{ app }}-web"
    image: localhost/{{ app }}-web
    env:
      VIRTUAL_HOST: "{{ env }}.diversionforum.net"
      LETSENCRYPT_HOST: "{{ env }}.diversionforum.net"
      LETSENCRYPT_EMAIL: "edward.ingram23@gmail.com"
    volume:
      - "{{ approot }}/public_html:/var/www/html:z"
    state: started
    restart_policy: always
    pod: "{{ app }}"
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: always

- name: Run diversionforum.net-php container
  containers.podman.podman_container:
    name: "{{ app }}-php"
    image: localhost/{{ app }}-php
    volume:
      - "{{ approot }}/public_html:/var/www/html"
    state: started
    restart_policy: always
    pod: "{{ app }}"
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: always

- name: Run diversionforum.net-mariadb container
  containers.podman.podman_container:
    name: "{{ app }}-db"
    image: localhost/{{ app }}-db
    env:
      MYSQL_ROOT_PASSWORD: "{{ mysql_root }}"
      MYSQL_DATABASE: smfprod
      MYSQL_USER: smfprod
      MYSQL_PASSWORD: "{{ mysql_smfprod }}"
    volume:
      - "{{ app }}-db-data:/var/lib/mysql"
    state: started
    restart_policy: always
    pod: "{{ app }}"
    generate_systemd:
      path: /etc/systemd/system
      restart_policy: always

- name: Get info of web container
  containers.podman.podman_container_info:
    name: "{{ app }}-web"
  register: web_info

- name: Get IP address of web container
  ansible.builtin.set_fact:
    ip_web_info: "{{ web_info | json_query('containers[0].NetworkSettings.IPAddress') }}"

- name: Pull phpmyadmin image and start container
  containers.podman.podman_container:
    name: "{{ app }}-phpmyadmin"
    image: docker.io/phpmyadmin:{{ phpmyadmin_ver }}
    env:
      PMA_HOST: "{{ ip_web_info }}"
      MYSQL_ROOT_PASSWORD: "{{ mysql_root }}"
      VIRTUAL_HOST: "{{ app }}phpmyadmin.local.lan"
    state: started
    restart_policy: unless-stopped
  tags: update_phpmyadmin
  when: env == "test"

- name: Set perms on webfiles
  ansible.builtin.shell:
    cmd: |
      find {{ approot }}/public_html -type d -exec chmod 0755 {} \;
      find {{ approot }}/public_html -type f -exec chmod 0644 {} \;
      chown -R 33:33 {{ approot }}/public_html

- name: Remove build folder
  ansible.builtin.file:
    path: "{{ builddir }}"
    state: absent
  when: env == "www"

- name: Enable container services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  loop:
    - "container-{{ app }}-web"
    - "container-{{ app }}-db"
    - "container-{{ app }}-php"

