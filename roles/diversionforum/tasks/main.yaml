---
# - name: Create supporting folder structure
#   ansible.builtin.file:
#     path: "{{ item }}"
#     state: directory
#     owner: poduser
#     group: poduser
#     mode: 0775
#   loop:
#     - "{{ root }}{{ app }}"
#     - /home/poduser/.config/systemd/user

# - name: Set nginx port (www)
#   ansible.builtin.set_fact:
#     nginx_port: 8081
#   when: env == "www"

# - name: Set nginx port (test)
#   ansible.builtin.set_fact:
#     nginx_port: 8082
#   when: env == "test"

- name: Check if dfsitebackup.tar.gz exists
  ansible.builtin.stat:
    path: /home/poduser/dfsitebackup.tar.gz
  register: dfsitebackup

- name: Stop playbook if dfsitebackup.tar.gz doesn't exist
  ansible.builtin.fail:
    msg: "dfsitebackup.tar.gz not found"
  when: not dfsitebackup.stat.exists

- name: Check if dfsqlbackup.bak.gz exists
  ansible.builtin.stat:
    path: /home/poduser/dfsqlbackup.bak.gz
  register: dfsqlbackup

- name: Stop playbook if dfsqlbackup.bak.gz doesn't exist
  ansible.builtin.fail:
    msg: "dfsqlbackup.bak.gz not found"
  when: not dfsqlbackup.stat.exists

- name: Create github key
  ansible.builtin.template:
    src: ssh-key-git.key.j2
    dest: /home/poduser/.ssh/ssh-key-git.key
    mode: '0400'

- name: Create site root folder
  ansible.builtin.file:
    path: "{{ root }}{{ app }}"
    state: directory
    mode: '0755'

- name: Check if Settings.php already exists
  ansible.builtin.stat:
    path: "{{ root }}{{ app }}/public_html/Settings.php"
  register: settingsphp

- name: Extract web files to html root
  ansible.builtin.unarchive:
    src: /home/poduser/dfsitebackup.tar.gz
    dest: "{{ root }}{{ app }}/"
    remote_src: true
    extra_opts: [--strip-components=4]
  when: not settingsphp.stat.exists

- name: Add db password to Settings.php
  ansible.builtin.lineinfile:
    path: "{{ root }}{{ app }}/public_html/Settings.php"
    search_string: '$db_passwd = '
    line: $db_passwd = '{{ mysql_smfprod }}';

- name: Change site URL to test.diversionforum.net (if env = test)
  ansible.builtin.lineinfile:
    path: "{{ root }}{{ app }}/public_html/Settings.php"
    search_string: '$boardurl = '
    line: $boardurl = 'http://test.diversionforum.net';
  when: env == "test"

- name: Copy repair_settings.php
  ansible.builtin.copy:
    src: repair_settings.php
    dest: "{{ root }}{{ app }}/public_html/repair_settings.php"

- name: Clone containers repo from github
  ansible.builtin.git:
    repo: "{{ repo }}containers.git"
    dest: "{{ root }}temp-containers"
    key_file: /home/poduser/.ssh/ssh-key-git.key
    accept_hostkey: true
    clone: true
    update: true

# - name: Copy out specific container build files
#   ansible.builtin.shell:
#     cmd: |
#       mkdir {{ builddir }}
#       mv {{ root }}temp-containers/diversionforum.net {{ builddir }}{{ env }}.diversionforum.net

- name: Create build dir
  ansible.builtin.file:
    path: "{{ builddir }}"
    state: directory

- name: Copy diversionforum.net container out to build dir
  ansible.builtin.copy:
    src: "{{ root }}temp-containers/diversionforum.net/"
    dest: "{{ builddir }}{{ env }}.diversionforum.net"
    remote_src: true

- name: Remove container clone
  ansible.builtin.file:
    path: "{{ root }}temp-containers"
    state: absent

- name: Build diversionforum.net-web image
  containers.podman.podman_image:
    name: "{{ app }}-nginx"
    path: "{{ builddir }}{{ app }}/nginx"
    force: true

- name: Build diversionforum.net-php image
  containers.podman.podman_image:
    name: "{{ app }}-php"
    path: "{{ builddir }}{{ app }}/php"
    force: true

- name: Extract df sql backup
  ansible.builtin.shell: gunzip -c /home/poduser/dfsqlbackup.bak.gz > {{ builddir }}{{ app }}/mariadb/smfprod.sql

- name: Build diversionforum.net-mariadb image
  containers.podman.podman_image:
    name: "{{ app }}-mariadb"
    path: "{{ builddir }}{{ app }}/mariadb"
    force: true

# - name: Create diversionforum.net pod
#   containers.podman.podman_pod:
#     name: "{{ app }}"
#     state: started
#     publish: "{{ nginx_port }}:{{ nginx_port }}"
#     network:
#       - webapps

- name: Create app pod
  ansible.builtin.include_role:
    name: eingram23.containers.create_pod
  vars:
    pod_name: "{{ app }}"
    publish_ports:
      - "8080:8080"
    pod_network: "webapps"

- name: Run diversionforum.net-web container
  containers.podman.podman_container:
    name: "{{ app }}-nginx"
    image: localhost/{{ app }}-nginx
    volume:
      - "{{ root }}{{ app }}/public_html:/var/www/html:z"
    state: started
    restart_policy: always
    pod: "{{ app }}"

- name: Run diversionforum.net-php container
  containers.podman.podman_container:
    name: "{{ app }}-php"
    image: localhost/{{ app }}-php
    volume:
      - "{{ root }}{{ app }}/public_html:/var/www/html"
    state: started
    restart_policy: always
    pod: "{{ app }}"

- name: Run diversionforum.net-mariadb container
  containers.podman.podman_container:
    name: "{{ app }}-mariadb"
    image: localhost/{{ app }}-mariadb
    env:
      MYSQL_ROOT_PASSWORD: "{{ mysql_root }}"
      MYSQL_DATABASE: smfprod
      MYSQL_USER: smfprod
      MYSQL_PASSWORD: "{{ mysql_smfprod }}"
    volume:
      - smf{{ env }}-data:/var/lib/mysql
    state: started
    restart_policy: always
    pod: "{{ app }}"

- name: Create phpmyadmin container
  ansible.builtin.include_role:
    name: eingram23.containers.phpmyadmin
  vars:
    container_name: "{{ app }}-phpmyadmin"
    ver: "latest"
    mariadb_container_name: "{{ app }}-mariadb"
    pod_name: "{{ app }}"

- name: Set perms on webfiles
  ansible.builtin.shell:
    cmd: |
      find {{ root }}{{ app }}/public_html -type d -exec chmod 0755 {} \;
      find {{ root }}{{ app }}/public_html -type f -exec chmod 0644 {} \;
      podman unshare chown -R 33:33 {{ root }}{{ app }}/public_html/

- name: Pause two minutes to let mariadb initialize
  ansible.builtin.pause:
    minutes: 2